<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>name.abhijitsarkar.webservices.jaxrs</groupId>
		<artifactId>jax-rs</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>jax-rs-hateoas</artifactId>
	<packaging>war</packaging>

	<description>
	A basic example of the Richardson Maturity Model a.k.a. RMM. Our problems domain is a hospital 
	appointment system as follows:
	
	# Patients can query for open slots with a hospital for a particular day. In response, they receive a list of 
	slots that're open on that day, with the name of a doctor that's available for a particular slot. If no slots are
	available on the requested date, they get an appropriate HTTP response.
	
	# Given a slot information, a client can either book an appointment, find more information about the doctor
	or request for the next slot. Requesting next slot assumes the same day. If a successful appointment is
	booked, the client receives a link to view or cancel the appointment. If for some reason the appointment booking
	failed, they get an appropriate HTTP response.
	
	Note: To book an appointment, a client must already be registered with the hospital; 
	registration is outside the scope of our system. 
	
	References:
	http://martinfowler.com/articles/richardsonMaturityModel.html
	http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven
	
	My design as as follows:
	
	GET /slot -> If slots are available, lists of all slots for current date. 
		Returns HTTP status code 200. If no slots are available, returns HTTP status code 404.	
	Date is according to the hospital.
	
	GET /slot?date=20150101 -> Response similar to above, except for the date is provided by the patient.
	
	POST /appointment/1 -> creates an appointment that has an id 1. Returns HTTP status code 201.
	
	GET /appointment/1 -> returns appointment that has an id 1. Returns HTTP status code 200.
		If appointment isn't found, HTTP status code 404.
			
	DELETE /appointment/1 -> cancels an appointment that has an id 1. Returns HTTP status code 200.
		If appointment isn't found, HTTP status code 404.
		
	GET /doctor/1 -> returns doctor whose id is 1. Returns HTTP status code 200. 
		If doctor isn't found, HTTP status code 404.
	</description>
</project>